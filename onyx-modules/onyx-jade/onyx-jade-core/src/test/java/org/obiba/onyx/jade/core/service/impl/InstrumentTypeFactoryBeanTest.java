/*******************************************************************************
 * Copyright 2008(c) The OBiBa Consortium. All rights reserved.
 * 
 * This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.obiba.onyx.jade.core.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.obiba.onyx.jade.core.domain.instrument.InstrumentParameter;
import org.obiba.onyx.jade.core.domain.instrument.InstrumentParameterCaptureMethod;
import org.obiba.onyx.jade.core.domain.instrument.InstrumentType;
import org.obiba.onyx.util.data.DataType;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

public class InstrumentTypeFactoryBeanTest {

  private InstrumentTypeFactoryBean instrumentTypeFactory;

  private Map<String, InstrumentType> instrumentTypes;

  @SuppressWarnings("unchecked")
  @Before
  public void setup() throws Exception {
    instrumentTypeFactory = new InstrumentTypeFactoryBean();
    instrumentTypeFactory.setResourceLoader(new PathMatchingResourcePatternResolver());
    instrumentTypeFactory.setResourcePatterns(new String[] { "instruments/**/instrument-descriptor.xml" });

    // Simulate the factory instantiation (this will generate the list of InstrumentType usually generated by the
    // factory when instantiated by spring).
    instrumentTypes = (Map<String, InstrumentType>) instrumentTypeFactory.getObject();

  }

  @Test
  public void testInstrumentType() {
    Assert.assertEquals("Instrument type count is wrong", 3, instrumentTypes.size());
  }

  @Test
  public void testInstrumentParameters() {

    InstrumentType spirometryInstrumentType = instrumentTypes.get("Spirometry");

    Assert.assertEquals(2, spirometryInstrumentType.getExpectedMeasureCount(null));

    List<InstrumentParameter> sprirometryParameters = spirometryInstrumentType.getInstrumentParameters();
    Map<String, InstrumentParameter> sprirometryParameterMap = new HashMap<String, InstrumentParameter>();
    for(InstrumentParameter spirometryParameter : sprirometryParameters) {
      sprirometryParameterMap.put(spirometryParameter.getCode(), spirometryParameter);
    }

    // Testing a few parameters attributes
    InstrumentParameter ethnicGroupParameter = sprirometryParameterMap.get("INPUT_PARTICIPANT_ETHNIC_GROUP");
    Assert.assertEquals("EthnicGroup", ethnicGroupParameter.getVendorName());
    Assert.assertEquals(InstrumentParameterCaptureMethod.AUTOMATIC, ethnicGroupParameter.getCaptureMethod());

    InstrumentParameter weightInput = sprirometryParameterMap.get("INPUT_PARTICIPANT_WEIGHT");
    Assert.assertEquals("kg", weightInput.getMeasurementUnit());
    Assert.assertEquals(DataType.DECIMAL, weightInput.getDataType());

    InstrumentParameter oneOutput = sprirometryParameterMap.get("RES_PRED_FEV1");
    Assert.assertEquals("L", oneOutput.getMeasurementUnit());
    Assert.assertEquals(DataType.DECIMAL, oneOutput.getDataType());
    Assert.assertEquals(InstrumentParameterCaptureMethod.AUTOMATIC, oneOutput.getCaptureMethod());

  }
}
